<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/075388a72a39.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a class="link" href="https://hexo.io/">Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>嘿嘿</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络自学（更新中）</title>
    <url>/2023/07/6328c60e2bef.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h2><ul>
<li>tcp向上传输的是可靠的，编号、校验、重传等，消耗时间、空间</li>
<li>对可靠性要求不高但对实时性要求高-&gt;UDP数据传输协议，所以常见于多媒体应用</li>
<li><a class="link" href="https://pic.imgdb.cn/item/64af49711ddac507cc874125.png">https://pic.imgdb.cn/item/64af49711ddac507cc874125.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 左TCP右UDP，TCP先连接</li>
<li>传输层是为多个远程应用进程提供服务的 在网络层提供的端到端的服务基础上实现，将主机到主机细分到进程到进程，是网络层的细分，不可靠到可靠</li>
<li>网络层源主机到目标主机，主机到主机，是尽力而为的（？可能会丢包等）端到端（其中有很多点到点）所以在数据链路层提供的相邻两点点到点服务基础上才能实现</li>
<li>传统？互联网网络层：路由：路由协议（路由器交换信息，路由算法-&gt;路由表）转发： IP协议（对到来的分组进行转发）</li>
<li>SDN<ul>
<li>数据平面</li>
<li>控制平面</li>
</ul>
</li>
</ul>
<h2 id="第一章-网络"><a href="#第一章-网络" class="headerlink" title="第一章 网络"></a>第一章 网络</h2><h2 id="什么是网络"><a href="#什么是网络" class="headerlink" title="什么是网络"></a>什么是网络</h2><ul>
<li>节点<ul>
<li>主机节点 画方<ul>
<li>host 联网的冰箱等联网设备 </li>
<li>end system</li>
</ul>
</li>
<li>数据交换节点 路由器、防火墙（网络层）、交换机（链路层）等既不是源、也不是目标，只进行转发 画圆的</li>
</ul>
</li>
<li>边 链路<ul>
<li>接入链路：主机和数据交换节点间access</li>
<li>骨干链路：数据交换节点之间的 backbone</li>
</ul>
</li>
<li>互联网：以TCPIP为主的一簇协议工作的网络</li>
<li>协议：==对等层的实体==在通信时应当遵循的规则的集合 <a class="link" href="https://pic.imgdb.cn/item/64af49da1ddac507cc8830c0.png">https://pic.imgdb.cn/item/64af49da1ddac507cc8830c0.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><ul>
<li>格式<ul>
<li>语法</li>
<li>语义</li>
</ul>
</li>
<li>次序 如收到请求后才发响应</li>
<li>动作</li>
</ul>
</li>
<li>从服务层面看网络：<ul>
<li>分布式应用</li>
<li>为分布式应用提供服务的基础设施，方式为api，两种形式如下<ul>
<li>面向连接的服务TCPIP</li>
<li>无连接的服务UDP <a class="link" href="https://pic.imgdb.cn/item/64af4a1b1ddac507cc88b9c5.png">https://pic.imgdb.cn/item/64af4a1b1ddac507cc88b9c5.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
</li>
<li>网络结构 三个子系统<ul>
<li>边缘系统edge</li>
<li>接入系统access</li>
<li>网络核心core 数据交换<br><a class="link" href="https://pic.imgdb.cn/item/64af4a701ddac507cc8986ce.png">https://pic.imgdb.cn/item/64af4a701ddac507cc8986ce.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link" href="https://pic.imgdb.cn/item/64af4a1b1ddac507cc88b9c5.png">https://pic.imgdb.cn/item/64af4a1b1ddac507cc88b9c5.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
<h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><p><a class="link" href="https://pic.imgdb.cn/item/64af4ace1ddac507cc8a6a2b.png">https://pic.imgdb.cn/item/64af4ace1ddac507cc8a6a2b.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><p>运用进程间通信的模式</p>
<ul>
<li>CS模式 客户端服务器模式 ==服务器是主要的，首先运转==，守在端口等待客户端的请求，客户端主动请求服务器的资源，主为服务器，从为客户端<ul>
<li>问题 请求多的时候达到阈值会断崖，存在可扩展性的问题？（不全）扩容满足不了用户的请求</li>
</ul>
</li>
<li>对等模式（P2P）<ul>
<li>每个节点==既是客户端又是服务器==，</li>
<li>请求资源的节点越多的同时 提供资源的节点也越来越多，且通信是==分布式==的，可以向不同节点请求</li>
<li>文件分发系统中常用 如迅雷、电驴</li>
</ul>
</li>
</ul>
</li>
<li><p>TCP面向连接TCP：握手，两者做好准备、底层协议栈 做好准备，为后续通信分配资源等，通信状态==只==在端系统维护（面向连接） <a class="link" href="https://pic.imgdb.cn/item/64af4b121ddac507cc8b0f2f.png">https://pic.imgdb.cn/item/64af4b121ddac507cc8b0f2f.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>可靠 保序 （排序编号重传等 有时间代价</li>
<li>流量控制：协调发送和接收速度，不让发送方发送太快以至于超过接收方的处理速度</li>
<li>拥塞控制 考虑到网络路径的通行能力</li>
</ul>
</li>
<li><p>UDP 无连接的</p>
<ul>
<li>不可靠 丢了就丢了，如定时采样的东西丢了也没事就可以采用UDP<ul>
<li>不用花时间的代价</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a class="link" href="https://pic.imgdb.cn/item/64af4b281ddac507cc8b4b4f.png">https://pic.imgdb.cn/item/64af4b281ddac507cc8b4b4f.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><ul>
<li><p>分组交换</p>
<ul>
<li>使用的是带宽的全部</li>
<li>以分组packet为单位，在每个节点全存储，查路由表，通过某个端口全转发来实现网络核心数据交换的作用</li>
<li>为什么要先完全存储？<ul>
<li>在使用这条链路的时候，其他的链路可以被其他主机对所使用 共享</li>
</ul>
</li>
<li>好处 按需使用，不占用网络资源 共享 支持的主机通信对数量更多 每个的节点不用维护主机对的映射</li>
<li>缺点<ul>
<li>延迟比线路交换长，线路交换只耽误一个比特的时间，而分组交换要耽误存储的时间</li>
<li>有排队时间，若这条链路还有别的分组要传<ul>
<li>排队延迟是随机的，后来的分组的排队延迟比前面的分组长</li>
</ul>
</li>
<li>拥塞：路由器的缓存用完了的话，分组将会被drop，所以有可能丢失</li>
</ul>
</li>
<li>举例 <a class="link" href="https://pic.imgdb.cn/item/64af4bb41ddac507cc8ccaaf.png![[Pasted">https://pic.imgdb.cn/item/64af4bb41ddac507cc8ccaaf.png![[Pasted <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  <a class="link" href="https://pic.imgdb.cn/item/64af4bd11ddac507cc8d1d90.png%E6%B3%A8%E6%84%8F%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E6%98%AF%E4%B8%80%E4%BB%B6%E4%BA%8B%E7%9A%84%E4%B8%A4%E9%9D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%AA%E7%AE%97%E4%B8%80%E6%AC%A1">https://pic.imgdb.cn/item/64af4bd11ddac507cc8d1d90.png注意发送和接收是一件事的两面，所以只算一次 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>划分时间片的方式，是随机的（不同于线路交换（固定的））称为<strong>统计多路复用</strong></li>
<li>方式 按照网络层有没有连接分为 <ul>
<li>数据报  无连接 分组写了目标主机的完整地址，两主机在通讯前不需要握手，每个分组的传递都是独立的<ul>
<li>因为路由表有可能变 即使目标主机ip没变，也有可能走不同的路线</li>
<li>路由器中不维护主机主机间通讯状态，查路由表就转走</li>
</ul>
</li>
<li>虚电路 有连接 主机和目标主机通讯前要握手建立网络层的连接，交换节点间要保持通讯的状态，建立了虚拟电路，每个分组携带了虚电路号而不是目标主机的完整地址，同样是存储转发<ul>
<li>怎么建立？靠信令</li>
<li>要维护通讯关系</li>
<li>这叫有连接而不是面向连接（通讯状态的维护仅仅体现在端系统）</li>
<li>虚电路和tcp<ul>
<li>比如有个简单网络，主机A跟D需要通信。通过两个路由节点B跟C。类似这样A&lt;—&gt;B&lt;—-&gt;C&lt;—&gt;D这时候在A和D之间，建立TCP连接，TCP协议是A和D之间的。那么，在整个链路中，A和D之间的包经过路由器B和C的时候，B和C如果针对每个这样的包都进行路由交换，会比较慢，那么这时候，B和C可以建立某种虚电路。这样：A&lt;—&gt;B&lt;===&gt;C&lt;—&gt;D需要注意的是，B和C之间的虚电路并不是仅仅服务于A到D的包的，他服务于B到C的包，也就是说如果通过B到C有其他的数据包，也可以通过虚电路。所以，简单来说的话，TCP是连接层协议，一般用于网络端点间。虚电路属于网络层，一般虚电路用于路由节点之间。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>电路交换，为呼叫预留端-端资源</p>
<ul>
<li>独享的，专用资源，而计算机通讯具有很强的突发性，线路交换不太适合</li>
<li>要求建立呼叫连接，有线路建立的时间</li>
<li>保证性能</li>
<li>可能会被浪费资源，</li>
<li>常用于固话、移动通讯 <a class="link" href="https://pic.imgdb.cn/item/64af4bee1ddac507cc8d6933.png">https://pic.imgdb.cn/item/64af4bee1ddac507cc8d6933.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://pic.imgdb.cn/item/64af4c041ddac507cc8da8a0.png">https://pic.imgdb.cn/item/64af4c041ddac507cc8da8a0.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>举例<ul>
<li>注意还有电磁波穿越空间的时间，在局域网时传</li>
<li>播延迟才可忽略</li>
<li>64kbs每面传输64k bit <a class="link" href="https://pic.imgdb.cn/item/64af4c1a1ddac507cc8de411.png">https://pic.imgdb.cn/item/64af4c1a1ddac507cc8de411.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>缺点<ul>
<li>连接建立时间长</li>
<li>计算机间通信具有突发性，若使用线路交换则浪费的片多<ul>
<li>即使这个call没有数据传递，则其所占据的片也不能被别的呼叫胡勇</li>
</ul>
</li>
<li>可靠性不高<ul>
<li>交换机要维持很多对piece和piece的映射关系，一旦核心节点宕机，影响范围广</li>
</ul>
</li>
</ul>
</li>
<li>方式：频分、时分、波分</li>
</ul>
</li>
</ul>
<h2 id="接入网和物理媒体"><a href="#接入网和物理媒体" class="headerlink" title="接入网和物理媒体"></a>接入网和物理媒体</h2><ul>
<li>边缘端系统通过接入网接入网络核心</li>
<li>住宅接入：modom<ul>
<li>利用已有电话线，调制、解调 在音频的载波上加载数据</li>
</ul>
</li>
<li>DSL<ul>
<li>使用现有电话线</li>
<li>家庭电话线使用不同的频率进行编码：<br>  &nbsp;<strong>高速上行信道</strong>，位于50kHz到1MHz频段；<br>  &nbsp;<strong>中速下行信道</strong>，位于4kHz到50hHz频段；<br>  &nbsp;<strong>普通的双向电话信道</strong>，位于0到4kHz频段。<br>  上行下行速率不等</li>
<li>一个分配器把到达家庭的 数据信号 和 电话信号 分隔开，并将 数据信号 转发给DSL</li>
</ul>
</li>
<li>线缆网络</li>
<li><a class="link" href="https://blog.csdn.net/weixin_43098506/article/details/124280360">(86条消息) 【计算机网络】边缘路由器 三种家庭接入网(光纤到户) DSL、HFC与PON_pon dsl_脚踏实地的大梦想家的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><a class="link" href="https://blog.csdn.net/weixin_43098506/article/details/124280360">(86条消息) 【计算机网络】边缘路由器 三种家庭接入网(光纤到户) DSL、HFC与PON_pon dsl_脚踏实地的大梦想家的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="网络结构和ISP"><a href="#网络结构和ISP" class="headerlink" title="网络结构和ISP"></a>网络结构和ISP</h2><p>把关系密集的，在一个网络当中的，成为一个ISP 的网络</p>
<ul>
<li>网络的结构<ul>
<li><p>接入ISP 端系统通过接入ISP接入到互联网，如移动、联通</p>
</li>
<li><p>接入ISP直接必须是互联的，如一个用的移动一个用的联通，若不互联则不能通信</p>
<ul>
<li>如何将他们互联？<ul>
<li>每两个直接相连，可扩展性scalability差，因为扩展到一定规模，系统i性能下降非常快</li>
<li>将每个接入ISP都连接到全局ISP <a class="link" href="https://pic.imgdb.cn/item/64af4c3b1ddac507cc8e4a64.png">https://pic.imgdb.cn/item/64af4c3b1ddac507cc8e4a64.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>合作IXP <a class="link" href="https://pic.imgdb.cn/item/64af4c3f1ddac507cc8e56db.png">https://pic.imgdb.cn/item/64af4c3f1ddac507cc8e56db.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>区域ISP 小的运营商regional access</li>
<li><a class="link" href="https://pic.imgdb.cn/item/64af4c431ddac507cc8e61cf.png">https://pic.imgdb.cn/item/64af4c431ddac507cc8e61cf.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
</li>
<li><p>ICP如谷歌、百度content provider network</p>
<ul>
<li>布置全球数据中心机房（靠核心ISP比较近的地方，因为用户要先通过ISP，提高用户体验），自己用专线连起来</li>
<li>如果要有不同</li>
<li><a class="link" href="https://pic.imgdb.cn/item/64af4cb91ddac507cc8fc89f.png">https://pic.imgdb.cn/item/64af4cb91ddac507cc8fc89f.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li><p>总结： </p>
<ul>
<li>中心：第一层ISP，国家/国际覆盖（点少，点和点间带宽大），速率极高，贷款大<ul>
<li>直接与其他第一层ISP相连<ul>
<li>通过peer连接或者和IXP</li>
</ul>
</li>
<li>与大量的第二层ISP和其他客户网络连接</li>
</ul>
</li>
<li>第二层ISP 最终目的通过合作把互联的范围扩大</li>
<li>第三层ISP 与其他本地ISP 如接入网，与端系统最近，把终端接进</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="分组延时，丢失和吞吐量"><a href="#分组延时，丢失和吞吐量" class="headerlink" title="分组延时，丢失和吞吐量"></a>分组延时，丢失和吞吐量</h2><ul>
<li>一跳（hop）所要经历的四种分组延时<ul>
<li>节点处理延迟，通常是微秒数量级或更少<ul>
<li>检查分组有无出错</li>
<li>查路由表、处理等</li>
</ul>
</li>
<li>排队延时 取决于当时网络情况（拥塞情况）<ul>
<li>流量强度I=La/R, a指单位时间内需要这条篇链路转发的分组数量，每个分组长度L，所以I=单位时间这条链路需要放出的bit数量/带宽<ul>
<li>范围是0-1</li>
<li>流量强度越接近1，排队延时趋近于无限大</li>
</ul>
</li>
</ul>
</li>
<li>传输trasmistion延时 如R=Mbps,分组长度L=Mbits,传输延时为L/R</li>
<li>传播延时 越过空间需要耗费的时间代价，物理链路的长度、在媒体的传播速度，所以若两个节点物理距离近的话传播延时基本可忽略不计</li>
<li>A主机到B主机需要很多跳</li>
</ul>
</li>
<li>信道容量 <ul>
<li>容量大 一个信道可以容纳很多分组</li>
<li>容量小 局域网 一个分组还没打完呢另一端就收到头的</li>
</ul>
</li>
<li>ICMP协议 互联网控制报文协议<ul>
<li>TTL time to leave生存时间是有限制，过一跳路由器TTL-1，若TTL=0的时候分组被抛掉（会通过ICMP协议告诉源主机，还说是我（某个路由器）干的）</li>
<li>可以利用TTL=1,2…测试每一跳的延时</li>
</ul>
</li>
<li>分组丢失<ul>
<li>每条链路对应的输出队列总是有限的，所以可能被用完，链路的队列缓冲区容量有限</li>
<li>分组到达一个满的队列时该分组会被drop</li>
<li>三种应对<ul>
<li>若上一个节点的链路是可靠的，则上一个节点重传，</li>
<li>而若是不可靠的如以太网，且应用进程是通过TCP来放出分组则为源主机重传，</li>
<li>若链路是不可靠的且协议是UDP则源主机也不重传即根本不重传 <a class="link" href="https://pic.imgdb.cn/item/64af4cdd1ddac507cc90451a.png">https://pic.imgdb.cn/item/64af4cdd1ddac507cc90451a.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
</li>
<li>吞吐量 <ul>
<li>单位时间内从源主机到目标主机的有效的比特数量/单位时间<ul>
<li>瞬间吞吐量 在一个时间点的速率</li>
<li>平均吞吐量</li>
<li>吞吐量取决于瓶颈链路（获得带宽最少的）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="协议层次和服务模型"><a href="#协议层次和服务模型" class="headerlink" title="协议层次和服务模型"></a>协议层次和服务模型</h2><ul>
<li>功能模块化 相互调用</li>
<li>分层 仅相邻层次的可调用 特殊的模块化</li>
<li>大问题分解 便于采用新技术</li>
<li>互联网复杂功能的实现<ul>
<li>上层模块可以使用下层服务，每层次通过层间接口向上层提供服务</li>
<li>每层实现一个或一组功能，通过协议实体的交互动作，对等层实体通过一些协议交换控制信息<ul>
<li>怎么把协议数据单元PDU传给对方实体？实体<ul>
<li>通过层间接口借助于下层提供的服务</li>
</ul>
</li>
<li>协议的目的是为了向上层提供更好的服务，协议的实现要借助下层的服务</li>
</ul>
</li>
<li>本层向上层提供的服务也就包括了本层及以下的所有服务</li>
</ul>
</li>
<li>服务和服务访问点<ul>
<li>服务 低层实体向上层实体提供他们之间通信的能力，是垂直的<ul>
<li>服务用户和服务访问点</li>
<li>若有三个应用，对于TCP来说是三个服务用户</li>
<li>服务访问点来区分报文给谁，下层服务提供者用于区分不同上层用户的信息，是在层间的</li>
</ul>
</li>
<li>原语 上层使用下层服务的形式，上层要使用什么具体的服务？告诉服务提供者</li>
<li>服务访问点SAP sercices access point 使用下层提供的服务通过层间的接口——地点</li>
</ul>
</li>
<li>SDU服务数据单元，加上一些控制信息通过层间接口传到下一层，抛掉一些控制信息再加上一些本层的控制信息，形成本层PDU协议数据单元，跟对等层交换信息都是通过PDU进行交换的<ul>
<li>SDU很大的时候有可能分成小块，每块都在头部加上控制信息形成大小合适的PDU</li>
<li>SDU很小的时候 合在一起再加一个头</li>
<li>总之，body部分来自于上层SDU</li>
<li>PDU 每层交换的数据单元的称呼都不一样</li>
</ul>
</li>
<li>分层处理的好处<ul>
<li>大问题分解 便于采用新技术</li>
</ul>
</li>
<li>坏处：<ul>
<li>分布实现，子系统之间要相互交换信息导致效率相对更低</li>
</ul>
</li>
<li>互联网协议栈<ul>
<li><a class="link" href="https://pic.imgdb.cn/item/64af4cfd1ddac507cc90afe6.png">https://pic.imgdb.cn/item/64af4cfd1ddac507cc90afe6.png <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>物理层<ul>
<li>上层下来的帧一组一组地变成物理信号，承载在媒体之上，传输单位时<strong>bit</strong></li>
</ul>
</li>
<li>链路层<ul>
<li>在物理层服务基础上在相邻两点间传输<strong>以帧</strong>为单位的数据，区分物理层比特的帧头帧尾</li>
</ul>
</li>
<li>网络层<ul>
<li>在链路层基础上提供以分组为单位的端到端（主机到主机）的数据传输</li>
<li>不可靠的</li>
</ul>
</li>
<li>传输层<ul>
<li>把通信从主机到主机细分为进程到进程</li>
<li>把网络层提供的可能不可靠的（乱序的、丢的等）变成可靠的</li>
</ul>
</li>
<li>应用层</li>
</ul>
</li>
</ul>
<p>封装和解封装没看<br><img lazyload="" src="/images/loading.svg" data-src="https://pic.imgdb.cn/item/64af57a21ddac507ccaefe9c.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>build my blog</title>
    <url>/2023/07/122701f1f353.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>教程，借用llq的博客<a class="link" href="https://xmnsatay.github.io/2023/02/26/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">https://xmnsatay.github.io/2023/02/26/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><ul>
<li>hexo-d出错<ul>
<li>解决：llq说没下载hexo-deployer-git<ul>
<li>npm install hexo-deployer-git –save</li>
</ul>
</li>
</ul>
</li>
<li>图片只能在本地查看，还不会添加图床<ul>
<li>解决：用了聚合图床，后续可能会考虑使用阿里云oss</li>
<li>放个网址<a class="link" href="https://cursorhu.github.io/2022/02/28/%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%A7%BB%E6%A4%8D%E7%9A%84Markdown%E5%86%99%E4%BD%9C%E5%92%8C%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%EF%BC%9AObsidian+PicGo+Hexo+Github/">搭建高可移植的Markdown写作和博客环境：Obsidian+PicGo+Hexo+Github | ThinkNotes (cursorhu.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://zhuanlan.zhihu.com/p/104152479">阿里云OSS PicGo 配置图床教程 超详细 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>存放这个博客的仓库名字一开始跟github用户名不同<ul>
<li>解决：仓库名字改成了用户名</li>
<li>疑问：仓库名字设置为用户名一定可以保证后续博客域名的唯一性吗？域名不区分大小写，然后后面一搜发现github的用户名也不区分大小写哈哈哈🤣</li>
</ul>
</li>
<li>成功通过域名访问到博客后，显示的界面只有我的仓库名称<ul>
<li>解决：hexo clean后再重新操作，不知道为啥？</li>
</ul>
</li>
<li>vscode写markdown不丝滑，准备换成obsidian<ul>
<li>放个教程<a class="link" href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">Hexo + Obsidian + Git 完美的博客部署与编辑方案 | EsunR-Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>存在的问题：按照上述方案优化，在ob里创建文件夹后在该文件夹下创建文件，可自动分类补全categories，但是后续想要修改分类的时候会自动变回原来的categories，即修改不了，猜想可能是因为自动分类插件，目前还未解决</li>
</ul>
</li>
<li>配置yml文件经常出错<ul>
<li>多注意缩进</li>
</ul>
</li>
</ul>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>放个redefine的官方文档 <a class="link" href="https://redefine-docs.ohevan.com/">Theme Redefine Docs - Redefine Docs (ohevan.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="鼓励自己"><a href="#鼓励自己" class="headerlink" title="鼓励自己"></a>鼓励自己</h3><p>搭博客有点麻烦，希望我能好好记录下去，或者说在这里储存储存我的笔记哈哈哈哈😀</p>
<pre><code>&lt;!--more--&gt;
</code></pre>
]]></content>
      <categories>
        <category>实操记录</category>
      </categories>
      <tags>
        <tag>搭博客</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>12.2杂谈</title>
    <url>/2023/12/3d52ef79bb83.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>呃呃呃我写博客的就跟写日记一样三分钟热度</p>
]]></content>
      <categories>
        <category>тс╪г</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>7.13杂谈</title>
    <url>/2023/07/f38d710a42eb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前天昨天简单地建起了博客，虽然碰到了很多奇怪的问题😢<br>而且虽然利用ob加图床可以很好地编辑了（排除了hexo-renderer-marked方案，因为我不用hexo new指令，直接在ob里创建文件）但是在编辑地时候，不能直接预览图片，抓耳挠腮.jpg，希望后续可以解决<br>昨天还添加了我的网易云歌单，话说这样岂不是可以不付费听付费地歌了（因为用的是我的id）好像有点危险</p>
]]></content>
      <categories>
        <category>тс╪г</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/23e7a70fea4d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img lazyload="" src="/images/loading.svg" data-src="/./Pasted%20image%2020250308164722.png"></p>
]]></content>
      <categories>
        <category>嘿嘿</category>
      </categories>
  </entry>
  <entry>
    <title>迁移博客，obsidian及图片路径相关问题</title>
    <url>/2025/03/3ab441bd3ff9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">发现报错：</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></tbody></table></figure></div>

<p>只需要安装：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure></div>

<p>另外俩报错</p>
<p> ssh连接方式及Connection closed by 198.xx.xx.xx port 22错误解决<br><a class="link" href="https://blog.csdn.net/m0_60340438/article/details/141273109">https://blog.csdn.net/m0_60340438/article/details/141273109 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>Nunjucks Error: 解决方案<br><a class="link" href="https://blog.csdn.net/weixin_45333934/article/details/108274320">https://blog.csdn.net/weixin_45333934/article/details/108274320 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>需求：</p>
<ol>
<li>图片显示<ul>
<li>比较简单的解决方案是使用相对路径</li>
<li>图片必须在source/images下才能显示，否则不管什么相对路径都不管用（是不是主题的问题？烦死啦哈哈）</li>
</ul>
</li>
<li>所有的笔记都在学习仓库里，不可能单独在博客仓库下编辑，所以需要从学习仓库里把笔记和图片都传到博客仓库<ul>
<li>解决方案：使用obsidian插件envelope，将学习仓库中的笔记上传再pull，然后再执行hexo d -g（后续要考虑自动化）</li>
<li>问题：该插件所有的文章都被传到同一个文件夹，即不能图片单独传到source/images下，就算pull后手动将图片移到images下，文章的图片路径（学习仓库里的相对路径）没法改成博客仓库的相对路径。。。</li>
</ul>
</li>
</ol>
<p><img lazyload="" src="/images/loading.svg" data-src="/../images/Pasted%20image%2020250306201923.png"></p>
]]></content>
      <categories>
        <category>嘿嘿</category>
      </categories>
  </entry>
</search>
